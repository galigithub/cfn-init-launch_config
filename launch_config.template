AWSTemplateFormatVersion: '2010-09-09'
Description:  Cloud Formation

Parameters:
  CidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.10.12.0/24
    Description: VPC CIDR Block (eg 10.0.0.0/16)
    Type: String
  pubAvailabilityZone:
    Description: The AvailabilityZone to use for the first subnet
    Type: AWS::EC2::AvailabilityZone::Name
  pubSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.10.12.0/25
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String
  privAvailabilityZone:
    Description: The AvailabilityZone to use for the second subnet
    Type: AWS::EC2::AvailabilityZone::Name
  privSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.10.12.128/25
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String
  
  InstanceName:
    Type: String

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: awscf
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstancePublicIP:
    Description: Specifies whether to launch instances with public IP addresses in your VPC.
    Type: String
    Default : "True"
    AllowedValues : ["False", "True"]

  InstanceAMI:
    Description: "AMI for use with the EC2 instances"
    Type: String
    Default: "ami-0d6621c01e8c2de2c"
    AllowedValues: ["ami-0d6621c01e8c2de2c"]
  
  MaxSizeASG:
    Description: "Enter the Max Size for the ASG"
    Type: String
  MinSizeASG:
    Description: "Enter the Min Size for the ASG"
    Type: String
  DesiredCapacityASG:
    Description: "Enter the desired capacity for the ASG"
    Type: String
    
  AsgGroupName:
    Description: "Auto scaling group name"
    Type: String

Mappings:
  RegionMap: 
    us-west-2: 
      "64": "ami-0d6621c01e8c2de2c"
    #ap-south-1: 
     # "64": "ami-0d6621c01e8c2de2c"

Resources:
  myDemoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: myDemoVPC

  rtb:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: {Ref: 'AWS::StackName'}
      VpcId:
        Ref: myDemoVPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: rtb

  pubSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: pubAvailabilityZone}
      CidrBlock: {Ref: pubSubnetCIDR}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, {Ref: pubAvailabilityZone}]
      VpcId: !Ref myDemoVPC

  privSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: privAvailabilityZone}
      CidrBlock: {Ref: privSubnetCIDR}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, {Ref: privAvailabilityZone}]
      VpcId: !Ref myDemoVPC

  pubSubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rtb
      SubnetId:
        Ref: pubSubnet

  privSubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rtb
      SubnetId:
        Ref: privSubnet

  WebSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTPD
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0      
      VpcId: !Ref myDemoVPC
  
  LaunchConfigStage:
     Type: AWS::AutoScaling::LaunchConfiguration
     Metadata:
       AWS::CloudFormation::Init:
         configSets:
           InstallAndRun: [ "Install" ]
         Install:
           Packages:
             yum:
               java-1.8.0-openjdk-devel: []
               tomcat: []
               httpd : []
           services:
             sysvinit:
               httpd:
                 enabled: true
                 ensureRunning: true
               tomcat:
                 enabled: true
                 ensureRunning: true
           files:
             /usr/share/tomcat/webapps/HelloWorld.jar:
               source: https://java-application-sample-jarfile.s3-us-west-2.amazonaws.com/HelloWorld.jar
               mode: '000666'
               owner: root
               group: root
     Properties:
        KeyName: !Ref KeyName
        ImageId: "ami-0d6621c01e8c2de2c"
        SecurityGroups: 
           - !Ref WebSecGrp
        InstanceType: !Ref InstanceType
        UserData:
           Fn::Base64:
             !Sub |
               #!/bin/bash -xe
               yum install -y aws-cfn-bootstrap
               /opt/aws/bin/cfn-init -v
                  --stack ${AWS::StackName}
                  --resource AutoScalingGroup
                  --configsets InstallAndRun
                  --region ${AWS::Region}                  
               /opt/aws/bin/cfn-signal -e $?
                  --stack ${AWS::StackName}
                  --resource AutoScalingGroup
                  --region ${AWS::Region}
     CreationPolicy:
       ResourceSignal:
         Timeout: PT5M             

     
  MyLoadBalancer:
     Type: AWS::ElasticLoadBalancing::LoadBalancer
     Properties:
        #AvailabilityZones: [ { "Ref" : "pubAvailabilityZone" } ]
        Subnets: [ { "Ref" : "pubSubnet" } ]
        Listeners:
           - Protocol: http
             LoadBalancerPort: 80
             InstancePort: 80
        HealthCheck:
           Target: http:80/
           HealthyThreshold: '2'
           UnhealthyThreshold: '2'
           Interval: '30'
           Timeout: '5'
        CrossZone: true
  
  AutoScalingGroup:
     Type: AWS::AutoScaling::AutoScalingGroup
     Properties:
        AutoScalingGroupName: !Ref AsgGroupName
        AvailabilityZones: [ { "Ref" : "pubAvailabilityZone" } ] 
        DesiredCapacity: !Ref DesiredCapacityASG
        Cooldown: 120
        LaunchConfigurationName: { "Ref" : "LaunchConfigStage" }
        LoadBalancerNames : [ { "Ref" : "MyLoadBalancer" } ]
        MaxSize: !Ref MaxSizeASG
        MinSize: !Ref MinSizeASG
        VPCZoneIdentifier: [ { "Ref" : "pubSubnet" } ] 
  
  ScaleUpPolicy:
     Type: AWS::AutoScaling::ScalingPolicy
     Properties:
        AdjustmentType: "ChangeInCapacity"
        AutoScalingGroupName: { "Ref" : "AutoScalingGroup" }
        Cooldown: "600"
        ScalingAdjustment: 1
  
  ScaleDownPolicy:
     Type: AWS::AutoScaling::ScalingPolicy
     Properties:
        AdjustmentType: "ChangeInCapacity"
        AutoScalingGroupName: { "Ref" : "AutoScalingGroup" }
        Cooldown: "600"
        ScalingAdjustment: "-1"
  
  CPUAlarmHigh:
     Type: AWS::CloudWatch::Alarm
     Properties:
        EvaluationPeriods: 1
        Statistic: "Average"
        Threshold: 90
        AlarmDescription: "CPU usage"
        Period: 60
        AlarmActions: [ { "Ref": "ScaleUpPolicy" } ]
        Namespace: "AWS/EC2"
        
  
        
Outputs:
   AutoscalingGroupDetails:
     Description: "The newly created asg"
     Value: !Ref AutoScalingGroup
   LaunchConfigDetails:
     Description: "the newly created launch config"
     Value: !Ref LaunchConfigStage
